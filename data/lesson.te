#version 410 core
layout(triangles, equal_spacing) in;

uniform mat4 modelViewProjectionMatrix;

uniform sampler2D heightmap;

// from control shader
in VertexES
{
	vec3 position;
	vec2 texcoord;
	vec3 normal;
	float tesLevel;
}
vertes[];

// to fragment shader
out VertexFS
{
	vec3 position;
	vec2 texcoord;
	vec3 normal;
	float tesLevel;
} vertfs;
const float ScaleUV = 0.05, MaxHeight = 6;
float Height(vec2 uv)
{
	return texture(heightmap, uv*ScaleUV).y *MaxHeight;
}

vec3 GetNormal(vec2 uv)
{

	float h =  Height(uv);
	float d = 1. /100 ;
	vec2 Dx[]={vec2(d,0),vec2(d,0),vec2(-d,0),vec2(-d,0)};
	vec2 Dy[]={vec2(0,d),vec2(0,-d),vec2(0,d),vec2(0,-d)};
	vec3 n;
	for(int i=0;i<4;i++)
	{
		float hy = Height(uv + Dy[i]);
		float hx = Height(uv + Dx[i]);
		vec3 nb = vec3(-(hx - h)/Dx[i].x, 1, -(hy - h)/Dy[i].y);
		
		n +=normalize(nb);
	}
	return normalize(n);
}
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}
									
void main(void)
{
	vertfs.texcoord = interpolate2D(vertes[0].texcoord, vertes[1].texcoord, vertes[2].texcoord);
	vec3 h = vec3(0,1,0) * Height(vertfs.texcoord);
	vertfs.position = interpolate3D(vertes[0].position, vertes[1].position, vertes[2].position)+h;	
	vertfs.normal = GetNormal(vertfs.texcoord);
	
	gl_Position = modelViewProjectionMatrix * 
                  vec4(interpolate3D(gl_in[0].gl_Position.xyz, gl_in[1].gl_Position.xyz, gl_in[2].gl_Position.xyz)+h,1);
}